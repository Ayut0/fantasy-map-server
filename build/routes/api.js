"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const validateAuth_1 = __importDefault(require("./middlware/validateAuth"));
const list_routes_1 = __importDefault(require("./list-routes"));
const category_routes_1 = __importDefault(require("./category-routes"));
const place_routes_1 = __importDefault(require("./place-routes"));
const file_routes_1 = __importDefault(require("./file-routes"));
const review_routes_1 = __importDefault(require("./review-routes"));
const favorite_routes_1 = __importDefault(require("./favorite-routes"));
const user_routes_1 = __importDefault(require("./user-routes"));
const apiRouter = (0, express_1.Router)();
const listRouter = (0, express_1.Router)();
listRouter.get(list_routes_1.default.paths.getPopular, list_routes_1.default.getMostPopular);
listRouter.get(list_routes_1.default.paths.getByQuery, list_routes_1.default.getByQuery);
listRouter.get(list_routes_1.default.paths.getByCategory, list_routes_1.default.getByCategory);
listRouter.get(list_routes_1.default.paths.get, validateAuth_1.default, list_routes_1.default.getById);
listRouter.post(list_routes_1.default.paths.create, validateAuth_1.default, list_routes_1.default.create);
listRouter.put(list_routes_1.default.paths.update, validateAuth_1.default, list_routes_1.default.update);
listRouter.delete(list_routes_1.default.paths.delete, validateAuth_1.default, list_routes_1.default.delete);
apiRouter.use(list_routes_1.default.paths.basePath, listRouter);
const categoryRouter = (0, express_1.Router)();
categoryRouter.get(category_routes_1.default.paths.get, category_routes_1.default.getAll);
apiRouter.use(category_routes_1.default.paths.basePath, categoryRouter);
const placesRouter = (0, express_1.Router)();
placesRouter.get(place_routes_1.default.paths.getById, validateAuth_1.default, place_routes_1.default.getById);
placesRouter.get(place_routes_1.default.paths.getAllByUserId, validateAuth_1.default, place_routes_1.default.getAllByUserId);
placesRouter.post(place_routes_1.default.paths.create, validateAuth_1.default, place_routes_1.default.create);
placesRouter.put(place_routes_1.default.paths.update, validateAuth_1.default, place_routes_1.default.update);
placesRouter.delete(place_routes_1.default.paths.delete, validateAuth_1.default, place_routes_1.default.delete);
apiRouter.use(place_routes_1.default.paths.basePath, placesRouter);
const filesRouter = (0, express_1.Router)();
filesRouter.post(file_routes_1.default.paths.upload, validateAuth_1.default, file_routes_1.default.upload);
apiRouter.use(file_routes_1.default.paths.basePath, filesRouter);
const reviewsRouter = (0, express_1.Router)();
reviewsRouter.get(review_routes_1.default.paths.getByUser, validateAuth_1.default, review_routes_1.default.getByUser);
reviewsRouter.post(review_routes_1.default.paths.create, validateAuth_1.default, review_routes_1.default.create);
reviewsRouter.put(review_routes_1.default.paths.update, validateAuth_1.default, review_routes_1.default.update);
reviewsRouter.delete(review_routes_1.default.paths.delete, validateAuth_1.default, review_routes_1.default.delete);
apiRouter.use(review_routes_1.default.paths.basePath, reviewsRouter);
const favoritesRouter = (0, express_1.Router)();
favoritesRouter.put(favorite_routes_1.default.paths.toggle, validateAuth_1.default, favorite_routes_1.default.toggle);
apiRouter.use(favorite_routes_1.default.paths.basePath, favoritesRouter);
const usersRouter = (0, express_1.Router)();
usersRouter.get(user_routes_1.default.paths.profile, validateAuth_1.default, user_routes_1.default.getProfile);
usersRouter.get(user_routes_1.default.paths.jwt, validateAuth_1.default, user_routes_1.default.getUserFromToken);
usersRouter.post(user_routes_1.default.paths.signup, user_routes_1.default.signup);
usersRouter.post(user_routes_1.default.paths.signout, user_routes_1.default.signout);
usersRouter.post(user_routes_1.default.paths.signin, user_routes_1.default.signin);
usersRouter.put(user_routes_1.default.paths.update, validateAuth_1.default, user_routes_1.default.update);
usersRouter.delete(user_routes_1.default.paths.delete, user_routes_1.default.delete);
apiRouter.use(user_routes_1.default.paths.basePath, usersRouter);
exports.default = apiRouter;
